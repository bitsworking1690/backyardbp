"""
Django settings for backyard_backend project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

import os
import environ
from datetime import timedelta
import django_heroku

# PATHES #############################################################
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
root_path = environ.Path(__file__)
file_path = os.path.join(BASE_DIR, "backyard_backend/.env")
env = environ.Env()
environ.Env.read_env(file_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # my apps
    'accounts',

    # packages
    'rest_framework',
    'django_rest_passwordreset',
    'corsheaders',
    'import_export',
    'rest_framework_simplejwt.token_blacklist',
    'drf_yasg',
    'drf_api_logger',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'accounts.failed_login_attempt_middleware.FailedLoginAttemptMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
    # 'accounts.auth_cookies_middleware.CustomHeaderMiddleware',
    # 'accounts.auth_cookies_middleware.CustomAssingCookieMiddleware',
    'drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware',
]

ROOT_URLCONF = 'backyard_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backyard_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env('DB_ENGINE'),
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT')
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# DRF ###################################################################
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        'accounts.authenticate.CustomAuthentication',
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        'rest_framework.permissions.AllowAny',
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    "DEFAULT_THROTTLE_RATES": {
        'high_scope':'10/minute',
        'low_scope': '3/minute',
    }
}


# JWT ###################################################################
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=6),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=12),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'HTTP_X_ACCESS_TOKEN': 'Cookie',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': (
        'rest_framework_simplejwt.tokens.AccessToken',
        # 'rest_framework_simplejwt.tokens.RefreshToken',
    ),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=15),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),

    # custom
    'AUTH_COOKIE': 'access',
    # Cookie name. Enables cookies if value is set.
    'AUTH_COOKIE_REFRESH': 'refresh',
    # A string like "example.com", or None for standard domain cookie.
    'AUTH_COOKIE_DOMAIN': None,
    # Whether the auth cookies should be secure (https:// only).
    'AUTH_COOKIE_SECURE': True,
    # Http only cookie flag.It's not fetch by javascript.
    'AUTH_COOKIE_HTTP_ONLY': True,
    'AUTH_COOKIE_PATH': '/',        # The path of the auth cookie.
    # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag.
    'AUTH_COOKIE_SAMESITE': "None", # TODO: Modify to Lax

    # 'BLACKLIST_CONNECTION_STRING': f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',
}


# API_VERSION = "v1"

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Riyadh'
USE_I18N = True
USE_TZ = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# S3 BUCKETS CONFIG ######

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

# MISCELLANEOUS ##########################################################
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'accounts.CustomUser'
django_heroku.settings(locals())
IMPORT_EXPORT_USE_TRANSACTIONS = True

# REDIS CONFIG
REDIS_HOST = env('REDIS_HOST')
REDIS_PORT = env('REDIS_PORT')
MAX_FAILED_LOGIN_ATTEMPTS = env('MAX_FAILED_LOGIN_ATTEMPTS')
FAILED_LOGIN_ATTEMPT_TTL = env('FAILED_LOGIN_ATTEMPT_TTL')


# CSRF & CORS Configuration
CORS_ALLOWED_ORIGINS = ['https://dev.hackyard-frontend-nca-2024.pages.dev', 'https://stage.hackyard-frontend-nca-2024.pages.dev',
                        'https://nca.hackyard.io', 'http://localhost:3000']
CSRF_TRUSTED_ORIGINS = ['https://dev.hackyard-frontend-nca-2024.pages.dev', 'https://stage.hackyard-frontend-nca-2024.pages.dev',
                        'https://nca.hackyard.io', 'http://localhost:3000']
CORS_ALLOW_CREDENTIALS = True
CSRF_USE_SESSIONS = True
SESSION_COOKIE_SECURE = True


# Email Configuration
EMAIL_BACKEND = env('EMAIL_BACKEND')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')


# Frontend Url
FRONTEND_SITE_URL = env('FRONTEND_SITE_URL')

SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,  # Disable Swagger's own session authentication
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
        },
    },
    "SECURITY_REQUIREMENTS": [
        {"Bearer": []},
    ],
}

LOGIN_URL = '/admin/login'

# API LOGGER SETTING
DRF_API_LOGGER_DATABASE = True
DRF_API_LOGGER_TIMEDELTA = 180 # UTC + 3 hours (180 minutes) = 'Asia/Riyadh'
DRF_API_LOGGER_METHODS = ['POST', 'DELETE', 'PUT']


# CSP Setting
CSP_DEFAULT_SRC = ("'self'", )

# Key to Encrypt/Decrypt Access Token
HASHED_ACCESS_TOKEN_KEY="PYqe9iGrCcf06CBNW2e7Mv9H_yJNNniv8LIriykKQtU="

# Resend otp timer
RESEND_OTP_TIME="90"